/*++

Licensed under the Apache-2.0 license.

Abstract:

    File contains test cases for LMS signature verification. This file is machine generated.

--*/

#![no_std]
#![no_main]

use caliptra_drivers::{Lms, LmsResult, Sha256};
use caliptra_lms_types::{LmsPublicKey, LmsSignature};
use caliptra_registers::sha256::Sha256Reg;
use caliptra_test_harness::test_suite;

struct LmsTest<'a> {
    test_passed: bool,
    signature: &'a [u8],
}

fn test_lms_random_suite() {
    let mut sha256 = unsafe { Sha256::new(Sha256Reg::new()) };
    	const MESSAGE :[u8; 33] = [116, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32, 109, 101, 115, 115, 97, 103, 101, 32, 73, 32, 119, 97, 110, 116, 32, 115, 105, 103, 110, 101, 100];
	const PUBLIC_KEY_BYTES: [u8; 48] = [0, 0, 0, 10, 0, 0, 0, 8, 74, 185, 205, 4, 188, 88, 206, 38, 159, 216, 237, 3, 94, 59, 124, 83, 246, 133, 9, 164, 53, 16, 137, 216, 16, 138, 167, 124, 9, 229, 126, 178, 29, 225, 74, 81, 70, 146, 138, 124];
	let (head, thing1, _tail): (&[u8], &[LmsPublicKey<6>], &[u8]) = unsafe { PUBLIC_KEY_BYTES.align_to::<LmsPublicKey<6>>() };
    	assert!(head.is_empty());
    	let lms_public_key = thing1[0];
	const TESTS: [LmsTest; 2] = [
		LmsTest{ test_passed: true, signature: &[0, 0, 0, 23, 0, 0, 0, 8, 255, 226, 54, 192, 84, 33, 180, 88, 149, 184, 160, 207, 114, 25, 219, 11, 121, 155, 203, 189, 62, 146, 129, 8, 95, 51, 248, 235, 170, 238, 122, 92, 219, 3, 12, 56, 117, 54, 235, 165, 106, 33, 210, 153, 54, 86, 178, 18, 48, 213, 0, 222, 167, 75, 15, 223, 39, 165, 254, 9, 67, 118, 103, 175, 177, 71, 253, 132, 24, 24, 25, 251, 219, 23, 238, 75, 23, 214, 8, 35, 154, 1, 36, 30, 226, 82, 179, 151, 35, 58, 41, 72, 149, 53, 176, 20, 200, 142, 42, 33, 37, 93, 120, 144, 178, 143, 43, 209, 110, 174, 84, 219, 78, 24, 134, 126, 0, 133, 5, 120, 57, 148, 43, 199, 162, 147, 221, 217, 167, 22, 94, 177, 126, 178, 118, 146, 52, 110, 105, 92, 14, 36, 200, 71, 81, 83, 53, 207, 187, 45, 192, 83, 150, 239, 25, 215, 88, 146, 187, 128, 232, 69, 18, 61, 10, 83, 119, 84, 105, 119, 95, 46, 101, 70, 231, 168, 69, 190, 197, 221, 163, 3, 12, 201, 240, 138, 6, 181, 161, 53, 49, 76, 173, 9, 24, 123, 224, 229, 252, 37, 99, 227, 169, 143, 20, 5, 29, 143, 42, 44, 99, 36, 109, 166, 165, 184, 2, 213, 112, 151, 88, 114, 172, 254, 31, 91, 15, 237, 254, 162, 35, 167, 17, 22, 198, 18, 205, 24, 46, 36, 213, 74, 104, 89, 221, 102, 84, 224, 226, 149, 156, 3, 226, 101, 190, 1, 237, 66, 231, 202, 251, 139, 227, 189, 225, 172, 85, 133, 15, 89, 5, 191, 29, 187, 25, 129, 148, 74, 53, 6, 76, 52, 49, 232, 198, 82, 158, 203, 40, 37, 106, 32, 177, 114, 197, 231, 122, 1, 75, 23, 65, 210, 231, 57, 68, 12, 194, 220, 233, 164, 20, 185, 197, 31, 85, 155, 141, 222, 251, 0, 34, 156, 126, 74, 201, 96, 247, 40, 196, 154, 58, 71, 24, 8, 50, 163, 142, 18, 225, 50, 141, 65, 83, 11, 153, 94, 49, 179, 210, 98, 108, 20, 224, 166, 186, 150, 123, 101, 200, 52, 145, 79, 67, 121, 221, 193, 98, 22, 90, 173, 242, 83, 78, 35, 252, 254, 194, 140, 198, 143, 126, 72, 80, 112, 79, 244, 85, 8, 195, 3, 45, 70, 69, 180, 100, 190, 205, 189, 109, 2, 144, 62, 231, 231, 120, 161, 110, 74, 139, 73, 38, 50, 21, 151, 64, 208, 240, 22, 217, 135, 48, 114, 199, 8, 187, 75, 20, 164, 93, 52, 239, 238, 103, 234, 29, 86, 64, 99, 225, 72, 90, 22, 5, 171, 224, 13, 66, 104, 100, 200, 241, 195, 4, 252, 165, 188, 152, 99, 231, 174, 56, 127, 115, 192, 109, 103, 172, 87, 79, 147, 81, 240, 85, 203, 50, 186, 6, 209, 149, 70, 241, 146, 217, 182, 57, 147, 151, 199, 183, 47, 223, 123, 34, 245, 27, 145, 11, 90, 94, 237, 51, 57, 15, 155, 107, 32, 242, 161, 66, 67, 238, 204, 245, 67, 5, 93, 157, 251, 241, 112, 122, 215, 200, 242, 39, 236, 243, 132, 14, 6, 27, 192, 103, 60, 102, 130, 251, 9, 102, 98, 232, 182, 2, 86, 144, 96, 25, 128, 66, 96, 181, 228, 12, 118, 108, 66, 2, 219, 29, 203, 178, 115, 10, 32, 219, 198, 232, 87, 175, 34, 235, 251, 27, 249, 7, 132, 56, 134, 106, 72, 12, 89, 181, 207, 91, 206, 92, 251, 205, 140, 112, 10, 38, 169, 153, 90, 117, 183, 194, 184, 200, 177, 1, 48, 9, 125, 215, 99, 237, 6, 70, 214, 211, 217, 32, 105, 236, 254, 60, 120, 119, 176, 246, 213, 43, 3, 184, 235, 9, 239, 69, 245, 28, 29, 112, 15, 220, 91, 95, 79, 155, 53, 209, 29, 78, 58, 47, 167, 0, 0, 0, 10, 151, 184, 23, 75, 158, 38, 86, 114, 43, 96, 101, 16, 242, 11, 40, 13, 245, 88, 127, 39, 160, 16, 136, 198, 229, 101, 246, 99, 6, 72, 139, 104, 189, 131, 214, 248, 166, 16, 42, 160, 122, 139, 102, 192, 242, 147, 161, 230, 199, 220, 135, 217, 40, 168, 57, 232, 16, 154, 149, 69, 240, 232, 210, 114, 81, 144, 2, 183, 201, 84, 171, 211, 215, 59, 150, 10, 89, 183, 8, 87, 195, 179, 33, 139, 0, 238, 136, 136, 69, 28, 59, 104, 41, 248, 167, 111, 0, 20, 156, 65, 119, 210, 147, 183, 142, 203, 23, 179, 81, 141, 181, 62, 228, 10, 101, 163, 12, 6, 25, 125]},
		LmsTest{ test_passed: true, signature: &[0, 0, 0, 19, 0, 0, 0, 8, 124, 169, 11, 41, 44, 178, 79, 197, 247, 114, 94, 215, 249, 11, 203, 198, 151, 97, 139, 164, 17, 18, 186, 24, 215, 80, 103, 17, 176, 190, 89, 46, 26, 99, 234, 141, 1, 163, 119, 120, 156, 242, 40, 61, 210, 245, 222, 178, 47, 21, 120, 83, 111, 164, 208, 251, 149, 184, 132, 186, 51, 131, 84, 91, 43, 68, 71, 156, 195, 230, 116, 107, 25, 219, 196, 151, 86, 181, 185, 49, 160, 81, 198, 154, 156, 160, 209, 143, 39, 255, 46, 63, 167, 42, 46, 43, 32, 155, 182, 110, 50, 132, 110, 234, 165, 200, 189, 63, 140, 69, 201, 22, 106, 101, 83, 51, 216, 79, 246, 27, 73, 21, 122, 105, 29, 95, 96, 170, 144, 241, 32, 147, 23, 8, 95, 1, 113, 224, 66, 3, 31, 69, 80, 177, 13, 121, 106, 198, 189, 120, 46, 207, 162, 1, 233, 101, 195, 199, 144, 89, 201, 185, 13, 54, 172, 99, 207, 253, 219, 138, 31, 97, 118, 45, 173, 240, 38, 132, 90, 10, 149, 67, 240, 96, 16, 92, 101, 47, 225, 5, 6, 132, 247, 47, 218, 231, 86, 6, 135, 222, 252, 26, 38, 21, 71, 206, 245, 134, 59, 15, 236, 14, 30, 86, 37, 9, 21, 113, 148, 8, 27, 181, 252, 169, 67, 44, 227, 223, 219, 134, 41, 238, 102, 94, 164, 246, 238, 45, 14, 128, 242, 229, 54, 89, 103, 13, 208, 210, 55, 246, 1, 92, 243, 110, 216, 40, 221, 204, 59, 224, 53, 128, 39, 137, 151, 62, 179, 158, 55, 136, 196, 77, 164, 225, 254, 162, 187, 33, 66, 162, 135, 18, 86, 242, 65, 107, 232, 191, 94, 5, 104, 179, 236, 191, 143, 175, 106, 154, 179, 220, 64, 245, 55, 23, 54, 12, 56, 158, 90, 108, 64, 157, 133, 96, 54, 133, 1, 134, 9, 123, 190, 155, 16, 153, 170, 162, 136, 40, 89, 102, 105, 70, 58, 188, 82, 95, 210, 70, 64, 168, 171, 65, 25, 112, 147, 131, 165, 224, 235, 105, 8, 65, 29, 174, 212, 181, 252, 78, 238, 235, 95, 24, 239, 77, 45, 189, 123, 31, 46, 112, 162, 38, 139, 57, 116, 65, 67, 31, 73, 111, 250, 137, 201, 249, 74, 151, 248, 182, 25, 208, 215, 58, 143, 179, 252, 133, 147, 246, 192, 226, 120, 120, 174, 139, 224, 71, 255, 194, 10, 50, 42, 3, 0, 203, 86, 209, 84, 209, 61, 122, 119, 216, 63, 179, 47, 200, 140, 13, 210, 10, 98, 87, 69, 14, 164, 66, 84, 46, 93, 128, 23, 47, 94, 41, 185, 221, 29, 104, 155, 1, 247, 255, 206, 140, 209, 147, 103, 105, 51, 95, 239, 32, 2, 115, 164, 225, 113, 148, 136, 201, 191, 232, 125, 105, 114, 142, 156, 210, 197, 48, 58, 197, 180, 108, 48, 173, 179, 104, 126, 226, 77, 91, 52, 174, 127, 23, 189, 116, 154, 44, 140, 184, 63, 251, 158, 12, 10, 149, 208, 156, 55, 226, 250, 173, 60, 230, 146, 201, 105, 210, 189, 9, 72, 84, 174, 81, 127, 115, 99, 181, 231, 200, 142, 145, 66, 9, 85, 64, 141, 121, 218, 132, 238, 50, 166, 58, 1, 192, 35, 86, 158, 152, 223, 43, 128, 130, 204, 22, 43, 229, 167, 194, 16, 176, 85, 17, 241, 133, 80, 151, 107, 153, 50, 204, 228, 101, 95, 124, 169, 167, 254, 38, 176, 15, 92, 99, 51, 171, 149, 133, 164, 145, 211, 152, 252, 16, 200, 242, 176, 1, 88, 80, 255, 226, 16, 54, 161, 162, 143, 117, 115, 156, 218, 216, 17, 172, 26, 91, 236, 25, 158, 7, 153, 217, 92, 213, 110, 41, 226, 103, 145, 20, 191, 226, 77, 176, 219, 18, 83, 94, 213, 118, 206, 111, 9, 113, 23, 112, 0, 0, 0, 10, 132, 104, 89, 204, 17, 65, 189, 208, 164, 182, 231, 110, 142, 5, 237, 73, 190, 199, 161, 101, 50, 119, 66, 233, 158, 11, 95, 238, 86, 180, 62, 208, 221, 2, 88, 157, 103, 141, 55, 46, 153, 56, 142, 155, 224, 52, 11, 21, 17, 233, 16, 99, 41, 217, 157, 13, 4, 128, 140, 118, 10, 116, 138, 210, 157, 128, 179, 184, 227, 232, 216, 4, 215, 59, 150, 10, 89, 183, 8, 87, 195, 179, 33, 139, 0, 238, 136, 136, 69, 28, 59, 104, 41, 248, 167, 111, 0, 20, 156, 65, 119, 210, 147, 183, 142, 203, 23, 179, 81, 141, 181, 62, 228, 10, 101, 163, 12, 6, 25, 125]},
	];
	for t in TESTS {
        let (head, thing2, _tail): (&[u8], &[LmsSignature<6, 26, 5>], &[u8]) =
            unsafe { t.signature.align_to::<LmsSignature<6, 26, 5>>() };

        assert!(head.is_empty());
        let lms_sig = thing2[0];
        let verify_result = Lms::default().verify_lms_signature_generic(
            &mut sha256,
            &MESSAGE,
            &lms_public_key,
            &lms_sig,
        );
        if t.test_passed {
            // if the test is supposed to pass then we better have no errors and a successful verification
            let result = verify_result.unwrap();
            assert_eq!(result, LmsResult::Success)
        } else {
            // if the test is supposed to fail it could be for a number of reasons that could raise a variety of errors
            // if the verification didn't error, then extract the LMS result and ensure it is a failed verification
            if verify_result.is_ok() {
                let result = verify_result.unwrap();
                assert_eq!(result, LmsResult::SigVerifyFailed)
            }
        }
    }
}

test_suite! {
    test_lms_random_suite,
}
