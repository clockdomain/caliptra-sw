/*++

Licensed under the Apache-2.0 license.

Abstract:

    File contains test cases for LMS signature verification. This file is machine generated.

--*/

#![no_std]
#![no_main]

use caliptra_drivers::{Lms, LmsResult, Sha256};
use caliptra_lms_types::{LmsPublicKey, LmsSignature};
use caliptra_registers::sha256::Sha256Reg;
use caliptra_test_harness::test_suite;

struct LmsTest<'a> {
    test_passed: bool,
    signature: &'a [u8],
}

fn test_lms_random_suite() {
    let mut sha256 = unsafe { Sha256::new(Sha256Reg::new()) };
    	const MESSAGE :[u8; 33] = [116, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32, 109, 101, 115, 115, 97, 103, 101, 32, 73, 32, 119, 97, 110, 116, 32, 115, 105, 103, 110, 101, 100];
	const PUBLIC_KEY_BYTES: [u8; 48] = [0, 0, 0, 13, 0, 0, 0, 8, 168, 211, 41, 9, 129, 230, 2, 214, 14, 237, 48, 116, 66, 85, 209, 250, 157, 182, 139, 65, 206, 103, 55, 170, 130, 88, 188, 110, 51, 12, 41, 240, 73, 97, 218, 144, 67, 10, 55, 96];
	let (head, thing1, _tail): (&[u8], &[LmsPublicKey<6>], &[u8]) = unsafe { PUBLIC_KEY_BYTES.align_to::<LmsPublicKey<6>>() };
    	assert!(head.is_empty());
    	let lms_public_key = thing1[0];
	const TESTS: [LmsTest; 2] = [
		LmsTest{ test_passed: true, signature: &[0, 8, 223, 127, 0, 0, 0, 8, 36, 216, 13, 23, 214, 96, 198, 70, 29, 218, 70, 120, 225, 145, 225, 125, 121, 194, 86, 167, 108, 66, 104, 117, 64, 68, 101, 91, 61, 172, 115, 128, 91, 150, 156, 118, 124, 158, 165, 100, 52, 108, 106, 76, 75, 10, 33, 196, 63, 17, 142, 227, 107, 111, 114, 72, 166, 165, 252, 179, 81, 236, 213, 181, 26, 3, 234, 199, 65, 0, 44, 33, 219, 157, 70, 111, 201, 49, 138, 189, 47, 124, 22, 182, 43, 251, 111, 160, 201, 5, 190, 46, 184, 51, 44, 57, 159, 138, 23, 175, 72, 56, 27, 199, 19, 197, 202, 97, 20, 237, 49, 139, 73, 20, 87, 167, 188, 96, 39, 209, 98, 193, 179, 134, 58, 237, 212, 197, 135, 228, 221, 132, 201, 247, 165, 62, 63, 224, 27, 230, 21, 33, 171, 145, 184, 233, 78, 151, 121, 142, 137, 201, 11, 192, 117, 174, 77, 254, 1, 198, 73, 38, 46, 109, 58, 160, 227, 253, 42, 252, 158, 103, 93, 251, 201, 22, 88, 195, 242, 208, 114, 105, 54, 253, 226, 234, 149, 185, 106, 171, 84, 88, 29, 25, 73, 224, 203, 188, 248, 28, 166, 186, 95, 80, 120, 28, 49, 19, 216, 65, 246, 216, 61, 90, 211, 101, 110, 231, 96, 49, 32, 94, 4, 43, 196, 88, 174, 177, 151, 172, 88, 181, 252, 253, 137, 229, 66, 86, 244, 69, 207, 71, 217, 116, 254, 12, 178, 181, 77, 26, 28, 40, 133, 122, 65, 62, 133, 209, 203, 117, 133, 201, 168, 43, 135, 141, 218, 188, 124, 217, 249, 143, 28, 236, 129, 19, 80, 117, 141, 159, 154, 178, 59, 89, 153, 189, 188, 102, 13, 152, 172, 28, 212, 41, 26, 71, 72, 47, 222, 59, 80, 212, 95, 160, 216, 24, 15, 222, 238, 241, 178, 180, 158, 173, 194, 171, 89, 50, 112, 194, 205, 162, 192, 101, 73, 63, 127, 237, 60, 160, 140, 251, 11, 227, 30, 201, 168, 187, 13, 118, 53, 124, 101, 232, 217, 121, 3, 55, 255, 186, 245, 49, 75, 222, 87, 49, 13, 20, 143, 108, 44, 231, 52, 185, 41, 133, 240, 241, 94, 62, 140, 58, 172, 177, 193, 88, 127, 11, 129, 44, 11, 68, 157, 180, 99, 55, 43, 157, 32, 112, 254, 112, 109, 88, 186, 153, 196, 246, 156, 160, 133, 175, 128, 119, 113, 205, 45, 242, 96, 163, 77, 174, 163, 27, 90, 78, 56, 93, 65, 168, 181, 59, 12, 125, 118, 218, 57, 49, 6, 30, 170, 52, 54, 16, 246, 9, 38, 132, 77, 105, 19, 199, 190, 157, 66, 80, 4, 34, 3, 124, 164, 68, 163, 38, 66, 60, 201, 169, 181, 94, 227, 122, 91, 46, 162, 21, 99, 249, 20, 141, 1, 80, 147, 196, 30, 99, 9, 37, 11, 245, 137, 221, 73, 193, 90, 17, 247, 21, 220, 156, 134, 139, 53, 89, 34, 213, 46, 127, 93, 90, 69, 92, 198, 74, 232, 243, 4, 31, 144, 34, 140, 197, 200, 113, 2, 126, 95, 224, 142, 122, 249, 28, 29, 209, 181, 18, 190, 152, 73, 215, 208, 44, 47, 153, 36, 134, 46, 9, 122, 148, 169, 217, 135, 59, 139, 0, 237, 238, 72, 35, 143, 39, 96, 164, 212, 231, 29, 50, 110, 185, 133, 206, 109, 226, 175, 70, 237, 72, 178, 143, 107, 24, 174, 191, 1, 125, 58, 193, 194, 109, 151, 151, 176, 182, 57, 170, 180, 225, 194, 38, 203, 115, 152, 129, 28, 133, 135, 31, 218, 117, 3, 174, 7, 37, 109, 237, 97, 161, 37, 41, 135, 18, 245, 194, 182, 136, 220, 164, 96, 68, 73, 175, 35, 17, 208, 243, 141, 28, 62, 173, 26, 247, 173, 124, 23, 127, 171, 99, 93, 149, 67, 83, 252, 161, 115, 34, 156, 188, 0, 0, 0, 13, 201, 68, 166, 112, 183, 87, 20, 38, 163, 225, 126, 219, 39, 12, 176, 110, 121, 91, 183, 21, 148, 147, 67, 75, 181, 195, 51, 178, 136, 34, 240, 178, 152, 130, 101, 110, 102, 149, 28, 239, 111, 191, 196, 68, 210, 60, 52, 59, 137, 211, 8, 227, 41, 155, 220, 165, 81, 64, 63, 198, 112, 223, 183, 30, 212, 15, 70, 104, 119, 146, 75, 122, 140, 41, 182, 157, 166, 64, 244, 15, 1, 162, 29, 100, 49, 34, 159, 39, 252, 28, 43, 113, 39, 54, 48, 10, 241, 21, 82, 156, 50, 54, 173, 108, 13, 106, 151, 91, 85, 142, 71, 126, 40, 36, 128, 213, 156, 86, 59, 14, 106, 28, 103, 79, 194, 128, 183, 26, 237, 194, 165, 78, 167, 58, 191, 170, 104, 3, 233, 36, 50, 42, 184, 94, 31, 66, 33, 144, 161, 155, 201, 229, 56, 211, 157, 51, 247, 90, 90, 129, 42, 89, 211, 39, 44, 0, 46, 93, 246, 146, 44, 252, 160, 212, 126, 248, 137, 176, 131, 41, 234, 69, 181, 123, 204, 194, 94, 23, 98, 58, 122, 20, 137, 41, 221, 111, 154, 53, 110, 64, 45, 133, 235, 254, 224, 151, 77, 28, 66, 35, 168, 187, 252, 175, 107, 136, 109, 220, 13, 181, 97, 185, 126, 229, 110, 213, 159, 130, 107, 188, 139, 47, 148, 14, 213, 56, 185, 3, 101, 75, 133, 65, 157, 202, 163, 23, 121, 80, 3, 202, 155, 90, 240, 106, 111, 229, 234, 71, 39, 103, 156, 23, 200, 171, 83, 247, 115, 231, 92, 196, 166, 102, 2, 48, 179, 242, 2, 240, 60, 180, 222, 137, 141, 213, 29, 245, 127, 116, 198, 233, 145, 4, 113, 0, 221, 177, 100, 163, 217, 81, 157, 61, 254, 111, 125, 67, 249, 8, 152, 120, 103, 200, 126, 140, 31, 240, 252, 140, 215, 156, 31, 209, 175, 173, 158, 156, 9, 169, 120, 28, 209, 168, 129, 121, 173, 192, 94, 199, 78, 191, 219, 129, 242, 187, 81, 122, 110, 245, 47, 201, 230, 38, 218, 110, 206, 221, 45, 252, 107, 11, 103, 200, 121, 156, 100, 40, 217, 253, 69, 135, 149, 177, 36, 60, 177, 164, 152, 58, 240, 217, 77, 186, 165, 58, 160, 152, 226, 61, 186, 161, 126, 154, 83, 182, 62, 32, 141, 101, 111, 197, 82, 25, 216, 197, 153, 164, 207, 35, 3, 193, 9, 174, 239, 234, 65, 221, 131, 22, 206, 176, 68, 159, 126, 234, 151, 146, 46, 45, 28, 226, 134, 181, 26, 110, 245, 117, 64, 62, 204, 30, 104, 49, 234, 183, 165, 218, 186, 238, 250, 249, 241, 66, 186, 187, 207, 134, 112, 54, 197, 85, 154, 0, 180, 170, 213, 216, 200, 94, 104, 117, 188, 111, 98, 220, 180, 1, 248, 48, 36, 252]},
		LmsTest{ test_passed: true, signature: &[0, 4, 196, 195, 0, 0, 0, 8, 82, 123, 138, 211, 26, 109, 244, 33, 180, 200, 195, 154, 103, 82, 95, 23, 171, 4, 66, 250, 24, 31, 21, 20, 23, 95, 161, 58, 152, 217, 12, 214, 255, 48, 67, 186, 182, 115, 227, 74, 85, 70, 234, 160, 80, 160, 21, 253, 13, 56, 78, 237, 149, 187, 249, 21, 187, 103, 121, 66, 199, 58, 113, 153, 17, 4, 142, 233, 34, 60, 250, 211, 91, 220, 53, 211, 68, 212, 104, 35, 241, 221, 94, 25, 173, 74, 104, 245, 217, 76, 37, 202, 105, 96, 154, 45, 119, 158, 120, 200, 62, 139, 68, 42, 180, 214, 254, 245, 89, 215, 99, 230, 138, 90, 132, 137, 207, 207, 74, 136, 132, 204, 249, 128, 210, 253, 75, 247, 171, 101, 250, 0, 148, 155, 166, 223, 163, 243, 127, 46, 127, 130, 209, 19, 209, 66, 177, 185, 48, 201, 162, 87, 215, 143, 203, 195, 53, 51, 29, 118, 170, 242, 75, 21, 45, 129, 30, 241, 0, 187, 195, 113, 86, 86, 22, 149, 139, 112, 139, 168, 84, 17, 206, 38, 109, 7, 113, 94, 155, 79, 209, 69, 46, 15, 108, 241, 233, 17, 62, 225, 169, 112, 187, 180, 50, 234, 161, 54, 72, 247, 97, 11, 110, 120, 255, 220, 97, 38, 64, 52, 227, 247, 119, 202, 224, 125, 161, 138, 188, 21, 209, 187, 178, 69, 18, 1, 78, 74, 23, 13, 45, 125, 102, 73, 61, 136, 123, 43, 71, 243, 0, 65, 4, 62, 221, 62, 44, 232, 17, 44, 21, 51, 62, 252, 43, 76, 150, 234, 232, 89, 163, 29, 236, 156, 154, 47, 139, 10, 171, 39, 179, 150, 39, 193, 59, 245, 147, 90, 152, 36, 227, 121, 186, 62, 158, 204, 155, 80, 212, 144, 39, 146, 40, 113, 150, 153, 148, 240, 154, 93, 226, 204, 171, 3, 31, 226, 88, 9, 79, 187, 16, 179, 147, 250, 205, 207, 6, 147, 93, 131, 78, 111, 47, 57, 222, 204, 199, 182, 180, 41, 164, 232, 157, 239, 178, 253, 83, 77, 249, 51, 214, 152, 96, 26, 52, 85, 169, 214, 194, 32, 181, 15, 188, 204, 71, 60, 41, 127, 84, 213, 56, 187, 182, 111, 172, 112, 210, 88, 108, 128, 27, 133, 179, 253, 49, 73, 133, 203, 181, 206, 158, 215, 196, 226, 96, 254, 220, 153, 97, 176, 134, 14, 172, 26, 40, 12, 182, 56, 26, 254, 7, 206, 117, 160, 2, 25, 31, 110, 184, 123, 17, 63, 53, 202, 244, 79, 233, 244, 44, 145, 161, 132, 150, 105, 40, 73, 234, 11, 15, 134, 44, 99, 184, 44, 95, 77, 93, 88, 54, 93, 115, 45, 47, 2, 130, 14, 38, 240, 14, 70, 171, 175, 149, 117, 15, 135, 115, 68, 123, 163, 248, 247, 156, 233, 198, 180, 15, 219, 107, 103, 119, 198, 73, 65, 181, 137, 163, 41, 24, 231, 117, 3, 178, 251, 113, 162, 244, 96, 209, 103, 116, 223, 9, 112, 161, 71, 30, 198, 140, 195, 88, 83, 21, 231, 203, 148, 232, 235, 129, 60, 16, 233, 154, 91, 181, 180, 117, 52, 161, 123, 62, 224, 64, 142, 213, 156, 96, 187, 35, 129, 109, 231, 130, 166, 178, 158, 255, 4, 196, 6, 240, 36, 113, 173, 240, 240, 183, 130, 61, 153, 172, 228, 197, 11, 149, 188, 177, 65, 226, 8, 193, 234, 56, 234, 56, 209, 161, 146, 0, 111, 17, 27, 229, 139, 51, 30, 7, 252, 167, 142, 53, 97, 109, 182, 100, 205, 185, 246, 172, 141, 240, 205, 88, 118, 67, 56, 23, 88, 252, 19, 245, 247, 104, 117, 228, 227, 189, 251, 70, 252, 237, 28, 213, 69, 64, 183, 108, 57, 46, 74, 213, 15, 141, 251, 152, 32, 139, 228, 161, 80, 46, 26, 96, 71, 117, 235, 104, 161, 0, 0, 0, 13, 240, 156, 21, 233, 100, 139, 28, 246, 97, 249, 50, 68, 89, 119, 60, 202, 202, 38, 27, 85, 115, 53, 136, 1, 112, 81, 124, 224, 52, 11, 128, 72, 38, 22, 21, 49, 225, 51, 139, 141, 144, 41, 14, 221, 245, 205, 193, 4, 248, 196, 4, 105, 38, 53, 82, 253, 48, 118, 11, 117, 248, 253, 103, 240, 51, 8, 154, 58, 122, 60, 176, 208, 28, 203, 117, 72, 13, 237, 71, 229, 139, 73, 224, 206, 120, 7, 186, 99, 16, 156, 188, 251, 47, 48, 38, 208, 248, 56, 65, 180, 237, 231, 119, 225, 198, 243, 168, 180, 192, 155, 116, 146, 153, 249, 247, 79, 16, 198, 133, 103, 218, 106, 226, 222, 244, 218, 255, 246, 71, 91, 223, 1, 198, 58, 12, 101, 90, 59, 0, 36, 197, 22, 189, 51, 133, 103, 231, 227, 83, 146, 239, 149, 156, 157, 205, 132, 227, 133, 59, 210, 21, 67, 132, 151, 152, 84, 72, 110, 11, 65, 101, 129, 62, 253, 119, 243, 5, 124, 251, 214, 49, 125, 95, 30, 251, 177, 181, 183, 95, 92, 94, 28, 98, 8, 98, 223, 143, 48, 123, 95, 236, 107, 224, 128, 253, 117, 125, 173, 205, 32, 250, 200, 166, 173, 186, 161, 251, 42, 33, 0, 238, 209, 145, 5, 146, 56, 251, 97, 85, 59, 39, 151, 230, 104, 150, 234, 169, 184, 7, 199, 129, 163, 55, 148, 71, 128, 207, 137, 250, 115, 138, 49, 216, 116, 32, 216, 193, 79, 243, 59, 171, 57, 27, 29, 212, 188, 148, 118, 18, 44, 41, 2, 244, 123, 58, 85, 65, 158, 170, 74, 122, 8, 247, 165, 114, 141, 226, 157, 145, 109, 199, 26, 110, 78, 24, 125, 238, 228, 57, 4, 44, 30, 78, 111, 40, 48, 8, 149, 92, 13, 46, 197, 15, 182, 155, 142, 112, 50, 208, 160, 139, 186, 87, 185, 44, 124, 215, 71, 124, 234, 13, 37, 43, 125, 83, 66, 184, 168, 216, 151, 31, 57, 65, 181, 78, 97, 243, 162, 186, 6, 138, 65, 6, 18, 159, 236, 160, 83, 5, 45, 68, 210, 75, 31, 199, 120, 57, 107, 177, 37, 133, 45, 58, 183, 211, 239, 64, 75, 174, 125, 66, 206, 229, 107, 250, 119, 166, 129, 76, 81, 124, 220, 35, 39, 101, 227, 155, 159, 44, 191, 208, 118, 45, 85, 188, 204, 185, 252, 52, 148, 171, 240, 22, 111, 251, 54, 142, 97, 57, 94, 170, 42, 2, 245, 72, 156, 33, 235, 10, 25, 59, 230, 53, 155, 163, 12, 252, 214, 46, 44, 65, 80, 45, 2, 238, 89, 196, 113, 204, 240, 222, 154, 167, 168, 138, 205, 211, 250, 255, 70, 255, 251, 173, 222, 65, 190, 156, 170, 69, 165, 42, 231, 220, 10, 221, 202, 172, 23, 103, 95]},
	];
	for t in TESTS {
        let (head, thing2, _tail): (&[u8], &[LmsSignature<6, 26, 20>], &[u8]) =
            unsafe { t.signature.align_to::<LmsSignature<6, 26, 20>>() };

        assert!(head.is_empty());
        let lms_sig = thing2[0];
        let verify_result = Lms::default().verify_lms_signature_generic(
            &mut sha256,
            &MESSAGE,
            &lms_public_key,
            &lms_sig,
        );
        if t.test_passed {
            // if the test is supposed to pass then we better have no errors and a successful verification
            let result = verify_result.unwrap();
            assert_eq!(result, LmsResult::Success)
        } else {
            // if the test is supposed to fail it could be for a number of reasons that could raise a variety of errors
            // if the verification didn't error, then extract the LMS result and ensure it is a failed verification
            if verify_result.is_ok() {
                let result = verify_result.unwrap();
                assert_eq!(result, LmsResult::SigVerifyFailed)
            }
        }
    }
}

test_suite! {
    test_lms_random_suite,
}
